<?php

namespace calculadoraTDD4\test\validacion;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-02-10 at 12:05:50.
 */
require "vendor/autoload.php";

use calculadoraTDD4\validacion\ValidadorOperacion;
use CalculadoraTDD4\modelo\Operador;
use calculadoraTDD4\modelo\OperadorBinario;

class ValidadorOperacionTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Operador
     */
    protected $validadorOperacion;
    protected $operador;

    const LIMITE_100 = 100;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        //$this->validadorLimiteSuperior = new ValidadorLimiteSuperior(new OperadorBinario());
    }


    /**
     * @dataProvider proveedorOperacionValida
     */
    public function testOperacionValida($operando1,$operando2,$operacion,$resultadoEsperado){
        $operador = $this->getMockBuilder("calculadoraTDD4\modelo\OperadorBinario")->getMock();//OperadorBinario();
        $operador->expects($this->any())->method("operacion")->will($this->returnValue($resultadoEsperado));
        $this->validadorOperacion = new ValidadorOperacion($operador);
        //$this->validadorOperacion->setCriterio($limiteInferior);
        $resultado = $this->validadorOperacion->operacion($operando1,$operando2,$operacion);
        $this->assertEquals($resultado,$resultadoEsperado);
    }
    
    /**
     * 
     * @dataProvider proveedorOperacionNoValida
     */
    public function testOperacionNoValida($operacion){
        $operador = $this->getMockBuilder("calculadoraTDD4\modelo\OperadorBinario")->getMock();//OperadorBinario();
        //$operador->expects($this->any())->method("operacion")->will($this->returnValue(0));
        $this->validadorOperacion = new ValidadorOperacion($operador);
        try{
            $this->validadorOperacion->operacion($operando1,$operando2,$operacion);
        } catch (\Exception $ex) {
            $this->assertTrue(true,$ex->getMessage());
            return;
        }
        $this->fail("No se ha producido una excecpciÃ³n");
    }
    
    public function proveedorOperacionValida(){
        return [
            "'suma' -> Operador::SUMA" => [50,40,"suma",90],
            "'resta' -> Operador::RESTA" => [20,1,"resta",19],
            "'multiplicacion' -> Operador::MULTIPLICACION" => [10,3,"multiplicacion",30],
            "'division' -> Operador::DIVISION" => [10,2,"division",5]
        ];
    }
    
    public function proveedorOperacionNoValida(){
        return [
            "'surma' -> ERROR" => ["surma"],
            "'x4fss' -> ERROR" => ["x4fss"],
            "'<3fs>' -> ERROR" => ["<3fs>"]
        ];
    }
}
