<?php

namespace calculadoraTDD4\validacion;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-03-04 at 09:43:58.
 */

require "vendor/autoload.php";
use calculadoraTDD4\validacion\ValidadorLimiteInferior;
use CalculadoraTDD4\modelo\Operador;
use calculadoraTDD4\modelo\OperadorBinario;

class ValidadorLimiteInferiorTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var ValidadorLimiteInferior
     */
    protected $validadorLimiteInferior;
    protected $operador;
    const LIMITE_100 = 100;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        //$this->object = new ValidadorLimiteInferior;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @dataProvider proveedorLimiteNoSuperado
     */
    public function testLimiteNoSuperado($operando1,$operando2,$limiteInferior,$operacion,$resultadoEsperado){
        $operador = $this->getMockBuilder("calculadoraTDD4\modelo\OperadorBinario")->getMock();//OperadorBinario();
        $operador->expects($this->any())->method("operacion")->will($this->returnValue($resultadoEsperado));
        $this->validadorLimiteInferior = new ValidadorLimiteInferior($operador);
        $this->validadorLimiteInferior->setCriterio($limiteInferior);
        $resultado = $this->validadorLimiteInferior->operacion($operando1,$operando2,$operacion);
        $this->assertEquals($resultado,$resultadoEsperado);
    }
    
    /**
     * 
     * @dataProvider proveedorLimiteSuperado
     */
    public function testLimiteSuperado($operando1,$operando2,$limiteInferior,$operacion){
        $operador = $this->getMockBuilder("calculadoraTDD4\modelo\OperadorBinario")->getMock();//OperadorBinario();
        //$operador->expects($this->any())->method("operacion")->will($this->returnValue(0));
        $this->validadorLimiteInferior = new ValidadorLimiteInferior($operador);
        $this->validadorLimiteInferior->setCriterio($limiteInferior);
        try{
            $this->validadorLimiteInferior->operacion($operando1,$operando2,$operacion);
        } catch (\Exception $ex) {
            $this->assertTrue(true,"La operación ha fallado por superar el límite");
            return;
        }
        $this->fail("No se ha producido una excecpción");
    }
    
    public function proveedorLimiteNoSuperado(){
        return [
            "LimInf 40: 50+40=90" => [50,40,40,Operador::SUMA,90],
            "LimInf 1: 20+1=21" => [20,1,1,Operador::SUMA,21],
            "LimInf 94: 99-5=94" => [99,-5,-5,  Operador::SUMA,94],
            "LimInf 94: -5+99=94" => [-5,99,-5, Operador::SUMA,94]
        ];
    }
    
    public function proveedorLimiteSuperado(){
        return [
            "LimInf 2: 100+1=ERROR" => [100,1,2,Operador::SUMA],
            "LimInf 2: 50+1=ERROR" => [50,1,2,Operador::SUMA],
            "LimInf 97: 101-5=ERROR" => [101,-5,97,  Operador::SUMA],
            "LimInf 97: -5+101=ERROR" => [-5,101,97, Operador::SUMA]
        ];
    }
}
