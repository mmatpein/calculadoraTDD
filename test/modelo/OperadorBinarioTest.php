<?php

namespace calculadoraTDD4\test\modelo;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-02-10 at 12:05:50.
 */
require "vendor/autoload.php";

use calculadoraTDD4\modelo\OperadorBinario;
use calculadoraTDD4\modelo\Operador;

class OperadorBinarioTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var OperadorBinario
     */
    protected $operadorBinario;

    const LIMITE_100 = 100;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->operadorBinario = new OperadorBinario();
    }

    /**
     * @dataProvider proveedorSuma
     */
    public function testSumaDosNumerosPositivos($operando1, $operando2, $resultadoEsperado) {
        $resultadoObtenido = $this->operadorBinario->suma($operando1, $operando2);
        $this->assertEquals($resultadoEsperado, $resultadoObtenido);
    }

    /**
     * @dataProvider proveedorResta
     */
    public function testRestaDosNumerosPositivos($operando1, $operando2, $resultadoEsperado) {
        $resultadoObtenido = $this->operadorBinario->resta($operando1, $operando2);
        $this->assertEquals($resultadoEsperado, $resultadoObtenido);
    }

    /**
     * @dataProvider proveedorMultiplicacion
     */
    public function testMultiplicaDosNumerosPositivos($operando1, $operando2, $resultadoEsperado) {
        $resultadoObtenido = $this->operadorBinario->multiplicacion($operando1, $operando2);
        $this->assertEquals($resultadoEsperado, $resultadoObtenido);
    }

    /**
     * @dataProvider proveedorDivision
     */
    public function testDivisionDosNumerosPositivos($operando1, $operando2, $resultadoEsperado) {
        $resultadoObtenido = $this->operadorBinario->division($operando1, $operando2);
        $this->assertEquals($resultadoEsperado, $resultadoObtenido);
    }

    /**
     * @dataProvider proveedorOperacion
     */
    public function testsOperacion($operando1, $operando2, $resultadoEsperado, $operacion) {
        $resultadoObtenido = $this->operadorBinario->operacion($operando1, $operando2, $operacion);
        $this->assertEquals($resultadoEsperado, $resultadoObtenido);
    }

    public function proveedorSuma() {
        return [
            "5+6=11" => [5, 6, 11],
            "5+2=7" => [5, 2, 7]
        ];
    }

    public function proveedorResta() {
        return [
            "5-3=2" => [5, 3, 2],
            "3-5=-2" => [3, 5, -2]
        ];
    }

    public function proveedorMultiplicacion() {
        return [
            "3*5=15" => [3, 5, 15],
            "6*1=6" => [6, 1, 6]
        ];
    }

    public function proveedorDivision() {
        return [
            "6/3=2" => [6, 3, 2],
            "10/2=5" => [10, 2, 5]
        ];
    }

    public function proveedorOperacion() {
        return [
            "5+6=11" => [5, 6, 11, Operador::SUMA],
            "5+2=7" => [5, 2, 7, Operador::SUMA],
            "5*6=30" => [5, 6, 30, Operador::MULTIPLICACION]
        ];
    }

    protected function tearDown() {
        $this->operadorBinario = null;
    }

}
